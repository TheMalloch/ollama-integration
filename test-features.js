// Script de test pour v√©rifier les nouvelles fonctionnalit√©s
const vscode = require('vscode');

async function testProjectDetection() {
    console.log('üîç Test de d√©tection de projet...');
    
    // Simuler la d√©tection dans le workspace actuel
    try {
        const command = 'ollama.analyzeProject';
        await vscode.commands.executeCommand(command);
        console.log('‚úÖ D√©tection de projet r√©ussie');
    } catch (error) {
        console.log('‚ùå Erreur d√©tection:', error.message);
    }
}

async function testContextManagement() {
    console.log('üìÅ Test de gestion du contexte...');
    
    try {
        const command = 'ollama.exportContext';
        await vscode.commands.executeCommand(command);
        console.log('‚úÖ Export de contexte r√©ussi');
    } catch (error) {
        console.log('‚ùå Erreur export:', error.message);
    }
}

async function testModelFileGeneration() {
    console.log('ü§ñ Test de g√©n√©ration ModelFile...');
    
    try {
        const command = 'ollama.generateModelFile';
        await vscode.commands.executeCommand(command);
        console.log('‚úÖ G√©n√©ration ModelFile r√©ussie');
    } catch (error) {
        console.log('‚ùå Erreur g√©n√©ration:', error.message);
    }
}

async function runTests() {
    console.log('üöÄ D√©marrage des tests des nouvelles fonctionnalit√©s\n');
    
    await testProjectDetection();
    await testContextManagement();
    await testModelFileGeneration();
    
    console.log('\n‚ú® Tests termin√©s!');
}

module.exports = { runTests };
